
routeplanner - An efficient Dijkstra shortest path implementation

Usage: routeplanner [OPERATION] [OPTION]...


OPERATIONS:

-h, --help                      Display this help page


The program is able to calculate shortest paths and nearest neighbors.
You can start one of these calculations or a web server which handles requests over HTTP.

-nbi, --node-by-id <nodeID>     Find node information by ID

-oto, --one-to-one              Calculate distances between points

-ota, --one-to-all <srcID>      Calculate all distances from start point <srcID>

-otm, --one-to-many <srcID>     Calculate distances from start point <srcID>

-nni, --next-node-iterative     Calculate nearest neighbor iteratively

-nnf, --next-node-fast          Calculate nearest neighbor with k-d tree

-srv, --server                  Start HTTP web server


I/O STREAM OPTIONS:

The program operates on 2 input (default: stdin) and 2 output (default: stdout) streams.

-i, --input-file <file>         Description of the graph structure
  [default: stdin]                Input format: [total number of nodes]
                                                [total number of edges]
                                                FOR EACH NODE:
                                                  [nodeID] [nodeID2] [latitude] [longitude] [elevation]
                                                FOR EACH EDGE:
                                                  [srcID] [trgID] [cost] [type] [maxspeed]

-r, --request-file <file>       List of distances to calculate or coordinates for nearest neighbor search
  [default: stdin]                Input format: --one-to-one
                                                FOR EACH ROUTE:
						  [srcID] [trgID]
				  Input format: --one-to-many
				                FOR EACH ROUTE:
						  [trgID]
				  Input format: --next-node-iterative, --next-node-fast
				                FOR EACH POINT:
						  [latitude] [longitude]

-o, --output-file <file>        Output of the calculated distances or the next neighbors
  [default: stdout]             See: OUTPUT FORMAT OPTIONS

-l, --log-file <file>           Log output of the program
  [default: stdout]               


OUTPUT FORMAT OPTIONS:

The output of a calculation looks like this:
  Output format: --node-by-id
                 [success] [node]
  Output format: --one-to-one, --one-to-all, --one-to-many
                 FOR EACH ROUTE:
	           [cost] [node]
  Output format: --next-node-iterative, --next-node-fast
                 FOR EACH NEAREST NEIGHBOR:
	           [distance] [node]

By default [node] is empty. You could change this with the following options.
If any of these parameters is set, [node] has the format
  [node] := [id] [latitude] [longitude] [distance] [node]...

-pl, --print-location           Print [latitude] [longitude] of each [node]

-pd, --print-distance           Only for: --one-to-one, --one-to-all, --one-to-many
                                Print [distance] to target for each [node]

-pp, --print-path               Only for: --one-to-one, --one-to-all, --one-to-many
                                Print every [node] in the calculated path
				Note: The order of the nodes is reversed: [trg] [node]... [src]


SERVER OPTIONS:

The web server receives/sends requests over HTTP on a specified port.
Also all files in the HTML directory are served (with redirection from / to /index.html).

-p, --port <port>               Port of the HTTP server
  [default: 80]

-d, --html-directory <dir>      Directory which will be accessible through the HTTP server
  [default: {resources}/html]


LOG OPTIONS:

The log verbosity defaults to --warning (--quiet if --output-file is same as --log-file).

-w, --warning                   Log warnings and errors

-q, --quiet                     Log only errors

-v, --verbose                   Log additional information about the calculation process


OTHER OPTIONS:

By default the program terminates, if there is an error in the input file(s).

-t, --tolerant                  Ignore input errors and try again


*******************************************************************************************************

Interactive use:

  For interactive use of the program, the options -v and -t are very useful.

    Only user input:
      routeplanner -oto -v -t

    Graph structure from file, request from user:
      routeplanner -nnf -v -t -i graph.fmi


Working with pipes:

  Because the default input/output streams are stdin/stdout, the program could be used with UNIX pipes.

    Read graph and requests from different files and write distances to a third file with pipes:
      (cat graph.fmi; cat requests.que) | routeplanner -oto > distances.ist

    Read graph and requests from different files and print only the calculation time:
      (cat graph.fmi; cat requests.que) | routeplanner -oto -v | grep seconds

